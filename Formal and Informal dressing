Blake is a teacher organizing the Independence Day parade. There are N students in a line, some dressed formally and others informally, Blake's goal is to make sure all the students are dressed formally. She selects the first student who is dressed informally and provide him with formal clothes. But since she is in a hurry, she picks the entire continuous segment that covers all the informally dressed students and remove them from the parade in order to start the parade quickly.

You are given a string where:

F' represents a student dressed formally.

I' represents a student dressed informally.

Your task is to find and return the minimum length of the segment Blake needs to remove to ensure all the students are dressed formally.

Note: There is at least one student in the line always.

Input Specification:

input1: An integer value N representing the length of the students lined up.

Input2: A string value representing the dresses of the N students lined up.

Output Specification:

Return the minimum length of the segment Blake needs to remove to ensure all the students are dressed formally

Example 1:

Input1: 10

input2: FIFFIIFFFI

Output: 6

Explanation:

Here, in the given lineup. FIFFIIFFEL Blake starts by selecting the first informally dressed student and provides them with formal clothes, now the lineup becomes FFFFIIFFFI. Then the continuous segment of informally dressed students she needs to remove is IIFFFI. The length of this segment is 6. Hence, 6 is returned as the output.

Example 2:

Input1:8

input2: FFFFFFFF

Output: 0

Explanation:

Here, the given line up is FFFFFFFF. Since there are no students dressed informally. O is returned as the output.


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


import java.util.*;
class Main
{
  public static void main(String args[])
  {
	  Scanner sc = new Scanner(System.in);
	  int n = sc.nextInt();
	  String s = sc.next();
	  int r = minsegment(n,s);
	  System.out.println(r);
  }
	public static int minsegment(int n, String s)
	{
		if(!s.contains("I"))
		{
			   return 0;
		}
		int f = s.indexOf('I');
		String updated = s.substring(0,f) + 'F' + s.substring(f +1);
		f = updated.indexOf('I');
		int l = updated.lastIndexOf('I');
		return (l - f + 1);
	}
}
